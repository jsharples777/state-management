import { StateValue } from "../state/interface/StateManager";
import { AbstractAsynchronousStateManager } from "../state/implementation/AbstractAsynchronousStateManager";
import { AsynchronousStateManager } from "../state/interface/AsynchronousStateManager";
import { IndexedDBStateManager } from "../state/implementation/IndexedDBStateManager";
import { FilterItem } from "../CommonTypes";
import { StateChangeListener } from "../state/interface/StateChangeListener";
import { ItemMerger } from "./ItemMerger";
export declare class CachedStateManager extends AbstractAsynchronousStateManager implements StateChangeListener {
    private sourceSM;
    private storageSM;
    private merger;
    constructor(sourceSM: AsynchronousStateManager, storageSM: IndexedDBStateManager, stateNames: string[], merger: ItemMerger);
    _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;
    _addNewNamedStateToStorage(state: StateValue): void;
    _ensureStatePresent(name: string): void;
    _findItemInState(name: string, item: any): any;
    _findItemsInState(name: string, filters: FilterItem[]): any[];
    _getState(name: string): StateValue;
    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void;
    _replaceNamedStateInStorage(state: StateValue): void;
    _saveState(name: string, stateObj: any): void;
    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void;
    filterResults(managerName: string, name: string, filterResults: any): void;
    foundResult(managerName: string, name: string, foundItem: any): void;
    getListenerName(): string;
    itemNotModified(managerName: string, name: string, item: any): void;
    stateChanged(managerName: string, name: string, newValue: any): void;
    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void;
    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void;
    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void;
}
