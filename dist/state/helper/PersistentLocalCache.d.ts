import { ClientDataMessage, SocketListener } from "../../socket/SocketListener";
import { StateManager } from "../interface/StateManager";
import { StateChangeListener } from "../interface/StateChangeListener";
import { AsynchronousStateManager } from "../interface/AsynchronousStateManager";
export declare class PersistentLocalCache implements StateChangeListener, SocketListener {
    private static _instance;
    private static COLLECTION_NAME_LAST_REFRESHED;
    private static COLLECTION_NAME_PREFIX;
    private static DEFAULT_URL_FOR_LAST_UPDATED_DATES;
    private cache;
    private encryptedCache;
    private cacheConfig;
    private dbName;
    private refreshDates;
    private applicationState;
    private hasLoadedUpdatedDates;
    private hasLoadedCache;
    private hasLoadedRefreshDates;
    private lastUpdatedDates;
    private isLoadingLastUpdateDates;
    private constructor();
    static getInstance(): PersistentLocalCache;
    loadLastUpdatedDates(): void;
    stateChanged(managerName: string, name: string, newValue: any): void;
    getListenerName(): string;
    addCollectionToCacheConfiguration(collectionName: string, keyField: string, source: AsynchronousStateManager, refreshInSeconds: number, encrypt?: boolean): void;
    initialiseAfterCollectionsAddedToCacheConfiguration(dbName: string, applicationState: StateManager): Promise<void>;
    isReadyToLoadCache(): boolean;
    onDocumentLoaded(): void;
    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void;
    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void;
    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void;
    filterResults(managerName: string, name: string, filterResults: any): void;
    foundResult(managerName: string, name: string, foundItem: any): void;
    handleMessage(message: string): void;
    getCurrentUser(): string;
    handleDataChangedByAnotherUser(message: ClientDataMessage): void;
    protected callbackForLastUpdatedDates(data: any, status: number): void;
    private getLocalStorageKey;
    private loadCache;
}
